//==========================================================================
// Space Reference FOM: Simulation to test the SpaceFOM roles implementation.
//==========================================================================
// Description:
// This is a simulation definition file (S_define) that provides an example
// of an SpaceFOM compliant federate that services all SpaceFOM roles.
//==========================================================================

//==========================================================================
// Define the Trick executive and services simulation object instances:
// Use the "standard" Trick executive simulation object. This simulation
// object provides the traditional Trick executive capabilities but can be
// tailored to provide facility or project unique executive behavior. See
// the Trick documentation for more on usage and available options.
//==========================================================================

// Define the Trick default system infrastructure.
#include "sim_objects/default_trick_sys.sm"

//==========================================================================
// Define the JEOD job cycle times.
//==========================================================================
#define LOW_RATE_ENV  60.00    // Low-rate environment update interval
#define HIGH_RATE_ENV  0.250   // High-rate environment update interval
#define DYNAMICS       0.03125 // Vehicle and planetary dynamics interval (32Hz)

//==========================================================================
// Define the Trick HLA job cycle times.
//==========================================================================
#define THLA_DATA_CYCLE_TIME        HIGH_RATE_ENV // HLA data communication cycle time.
#define THLA_INTERACTION_CYCLE_TIME DYNAMICS      // HLA Interaction cycle time.

//==========================================================================
// Define the HLA phase initialization priorities.
//==========================================================================
#define P_HLA_EARLY  1     // HLA early job phase.
#define P_HLA_INIT   9     // HLA initialization phase.
#define P_HLA_LATE   65534 // HLA late job phase.


//==========================================================================
// JEOD include files used in SimObject definitions or for input file 
// instantiations.
//==========================================================================
#include "default_priority_settings.sm"
#include "jeod_sys.sm"

// Set up desired time types and include the JEOD time S_module
#define TIME_MODEL_UT1
#define TIME_MODEL_UTC
#define TIME_MODEL_TT
#define TIME_MODEL_GMST
#define TIME_CALENDAR_UPDATE_INTERVAL  DYNAMICS
#include "jeod_time.sm"

#include "dynamics.sm"

#ifndef EPHEM_DE440
 #define EPHEM_DE440
#endif
#include "environment.sm"
#include "sun_basic.sm"
#include "earth_GGM05c.sm"
#include "moon_basic.sm"
#include "mars_MRO110B2.sm"

//==========================================================================
// Trick HLA and SpaceFOM include files used in SimObject definitions or
// for input file instantiations.
//==========================================================================

// This is needed for CTE timeline instantiation in the input file.
##include "TrickHLA/CTETimelineBase.hh"


//==========================================================================
// SIM_OBJECT: THLA - Generalized TrickHLA interface routines.
//==========================================================================
#include "SpaceFOM.sm"

%header{
 using namespace TrickHLA;
 using namespace SpaceFOM;
%}

//==========================================================================
// SIM_OBJECT: THLA_INIT - An example of a TrickHLA multi-phase
// initialization SimObject.
//==========================================================================
class JEODHLAInitSimObject : public Trick::SimObject {

 public:

   JEODHLAInitSimObject( jeod::TimeManager          & time_manager_in,
                         jeod::TimeManagerInit      & time_manager_init_in,
                         jeod::TimeTAI              & time_tai_in,
                         jeod::TimeTT               & time_tt_in,
                         TrickHLA::Manager          & thla_mngr,
                         TrickHLA::Federate         & thla_fed,
                         SpaceFOM::ExecutionControl & exec_ctrl,
                         unsigned short               _INIT = 59 )
      : time_manager(time_manager_in),
        time_manager_init(time_manager_init_in),
        time_tai(time_tai_in),
        time_tt(time_tt_in),
        thla_manager( thla_mngr ),
        thla_federate( thla_fed ),
        execution_control( exec_ctrl )
   {

      // Initialize the epoch based on the starting JEOD time.
      P_INIT ("initialization") set_scenario_timeline_epoch(time_tt);
      P_TIME ("initialization") time_tt.calendar_update( exec_get_sim_time() );

      //--------------------------------------------------------------------
      // NOTE: Initialization phase numbers must be greater than P60 
      // (i.e. P_HLA_INIT) so that the initialization jobs run after the
      // P60 THLA.manager->initialize() job.
      //--------------------------------------------------------------------

      // Alternative method: Send and receive all the initialization data.

      // Send all the initialization data.
      P100 ("initialization") thla_manager.send_init_data();
      
      // Wait to receive all the initialization data.
      P100 ("initialization") thla_manager.receive_init_data();
      
      // Do some processing here if needed...
      
      // Clear remaining initialization sync-points.
      P100 ("initialization") thla_manager.clear_init_sync_points();

      //
      // Scheduled jobs.
      //
      // Update the TT calendar date.
      (TIME_CALENDAR_UPDATE_INTERVAL, "environment") time_tt.calendar_update( exec_get_sim_time() );
   }

 protected:

   // Set the SpaceFOM scenario timeline epoch from the JEOD TT time.
   void set_scenario_timeline_epoch(jeod::TimeTT & tt_time){

      // Set the epoch if this is the Master federate.
      if( execution_control.is_master() ){
         execution_control.scenario_timeline->set_epoch((tt_time.trunc_julian_time * 86400.0));
         std::cout.precision( 15 );
         std::cout << "JEODHLAInitSimObject::set_scenario_timeline_epoch():" << __LINE__ << std::endl
                   << "\tSeconds: " << (time_tt.trunc_julian_time * 86400.0) << std::endl
                   << "\tDate: " << time_tt.calendar_year
                   << "-" << time_tt.calendar_month
                   << "-" << time_tt.calendar_day
                   << "::" << time_tt.calendar_hour
                   << ":" << time_tt.calendar_minute
                   << ":" << time_tt.calendar_second << std::endl
                   << std::endl;
      }
      // Otherwise, it will be set through the ExCO.
      else {

         // Set the JEOD TAI initialization time.
         // This will override the value set in the input file before JEOD
         // time routines are initialized.
         time_manager_init.initializer = "TAI";
         time_manager_init.sim_start_format = jeod::TimeEnum::truncated_julian;

         time_tt.initialize_from_name = "TAI";

         time_tai.update_from_name = "Dyn";
         time_tt.update_from_name  = "TAI";

         time_tai.initializing_value = ((execution_control.scenario_timeline->get_epoch() - 32.184) / 86400.0);
         time_tai.trunc_julian_time = time_tai.initializing_value;

         std::cout.precision( 15 );
         std::cout << "JEODHLAInitSimObject::set_scenario_timeline_epoch():" << __LINE__ << std::endl
                   << "\tSeconds: " << (time_tai.trunc_julian_time * 86400.0) << std::endl;
      }
   }

 private:
   jeod::TimeManager          & time_manager;
   jeod::TimeManagerInit      & time_manager_init;
   jeod::TimeTAI              & time_tai;
   jeod::TimeTT               & time_tt;
   TrickHLA::Manager          & thla_manager;
   TrickHLA::Federate         & thla_federate;
   SpaceFOM::ExecutionControl & execution_control;
	
   // Do not allow the implicit copy constructor or assignment operator.
   JEODHLAInitSimObject(const JEODHLAInitSimObject & rhs);
   JEODHLAInitSimObject & operator=(const JEODHLAInitSimObject & rhs);
	
   // Do not allow the default constructor.
   JEODHLAInitSimObject();

};


//==========================================================================
// SIM_OBJECT: JEODRefFrameTreeSimObject - An JEOD reference frame tree
// simulation object definition.
//==========================================================================
##include <iostream>
##include "utils/ref_frames/include/ref_frame_state.hh"
class JEODRefFrameTreeSimObject : public Trick::SimObject {

  public:

   // SpaceFOM Reference Frame Tree constructor.
   JEODRefFrameTreeSimObject( TrickHLA::Manager          & thla_manager_in,
                              SpaceFOM::ExecutionControl & exec_cntrl_in,
                              jeod::TimeTT               & time_tt_in,
                              jeod::DynManager           & dyn_manager_in,
                              jeod::Planet               & sun_in,
                              jeod::Planet               & earth_in,
                              jeod::Planet               & moon_in,
                              jeod::Planet               & mars_in )
   : thla_manager(thla_manager_in),
     exec_cntrl( exec_cntrl_in ),
     time_tt(time_tt_in),
     dyn_manager(dyn_manager_in),
     sun(sun_in),
     earth(earth_in),
     moon(moon_in),
     mars(mars_in)
   {
      //
      // Default data jobs
      //
      ("default_data") configure_tree();

      // We need to subscribe to the desired reference frames to insure that
      // JEOD updates them.
      P_EPH ("initialization") subscribe_to_frames();
      P_EPH ("initialization") solar_system_barycenter.set_frames( ssbary_ptr, ssbary_ptr );
      P_EPH ("initialization") sun_inertial.set_frames( ssbary_ptr, &sun.inertial );
      P_EPH ("initialization") earth_moon_barycenter.set_frames( ssbary_ptr, embary_ptr );
      P_EPH ("initialization") earth_centered_inertial.set_frames( embary_ptr, &earth.inertial );
      P_EPH ("initialization") moon_centered_inertial.set_frames( embary_ptr, &moon.inertial );
      P_EPH ("initialization") mars_centered_inertial.set_frames( ssbary_ptr, &mars.inertial );
      P_EPH ("initialization") earth_centered_fixed.set_frames( &earth.inertial, &earth.pfix );
      P_EPH ("initialization") moon_centered_fixed.set_frames( &moon.inertial, &moon.pfix );
      P_EPH ("initialization") mars_centered_fixed.set_frames( &mars.inertial, &mars.pfix );

   }


   // Subscribe to the needed JEOD reference frames.
   void subscribe_to_frames(){

      // We can start with the planetary frames.
      sun.inertial.subscribe();
      earth.inertial.subscribe();
      earth.pfix.subscribe();
      moon.inertial.subscribe();
      moon.pfix.subscribe();
      mars.inertial.subscribe();
      mars.pfix.subscribe();

      // We need to lookup the barycentric frames.
      ssbary_ptr = dyn_manager.find_ref_frame ("SSBary.inertial");
      // Must have a reference to the Solar System Barycenter frame.
      if ( ssbary_ptr == NULL ) {
         std::ostringstream errmsg;
         errmsg << "JEODRefFrameTreeSimObject::subscribe_to_frames():" << __LINE__
                << " ERROR: Unexpected NULL reference frame: SSBary.inertial" << THLA_ENDL;
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }
      embary_ptr = dyn_manager.find_ref_frame ("EMBary.inertial");
      if ( embary_ptr == NULL ) {
         std::ostringstream errmsg;
         errmsg << "JEODRefFrameTreeSimObject::subscribe_to_frames():" << __LINE__
                << " ERROR: Unexpected NULL reference frame: EMBary.inertial" << THLA_ENDL;
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }

      // Subscribe to the barycenter frames.
      ssbary_ptr->subscribe();
      embary_ptr->subscribe();

      return;
   }


  public:

   // References to working SpaceFOM reference frames.
   JEODRefFrameState * ssbary_frame_ptr;
   JEODRefFrameState * sun_frame_ptr;
   JEODRefFrameState * embary_frame_ptr;
   JEODRefFrameState * earth_frame_ptr;
   JEODRefFrameState * moon_frame_ptr;
   JEODRefFrameState * mars_frame_ptr;
   JEODRefFrameState * earth_pfix_frame_ptr;
   JEODRefFrameState * moon_pfix_frame_ptr;
   JEODRefFrameState * mars_pfix_frame_ptr;


  private:

   // Configure the reference frame tree.
   void configure_tree()
   {
      // Allocate the Reference Frame tree.
      thla_manager.obj_count = 9;
      thla_manager.objects = (TrickHLA::Object*)trick_MM->declare_var( "TrickHLA::Object",
                                                                       thla_manager.obj_count );

      // Setup the Solar System barycenter frame as the root reference frame.
      ssbary_frame_ptr->default_data( &(thla_manager.objects[0]),
                                      "solar_system_barycenter",
                                      "frame_packing",
                                      NULL,
                                      "SolarSystemBarycentricInertial",
                                      false );

      // Set the Solar System barycenter frame as the root reference frame.
      exec_cntrl.root_ref_frame = ssbary_frame_ptr;

      // Setup the Sun inertial reference frame.
      sun_frame_ptr->default_data( &(thla_manager.objects[1]),
                                   "sun_inertial",
                                   "frame_packing",
                                   "SolarSystemBarycentricInertial",
                                   "SunCentricInertial",
                                   false );

      // Setup the Earth-Moon barycentric inertial reference frame.
      embary_frame_ptr->default_data( &(thla_manager.objects[2]),
                                      "earth_moon_barycenter",
                                      "frame_packing",
                                      "SolarSystemBarycentricInertial",
                                      "EarthMoonBarycentricInertial",
                                      false );

      // Setup the Earth inertial reference frame.
      earth_frame_ptr->default_data( &(thla_manager.objects[3]),
                                     "earth_centered_inertial",
                                     "frame_packing",
                                     "EarthMoonBarycentricInertial",
                                     "EarthMJ2000Eq",
                                     false );

      // Setup the Moon inertial reference frame.
      moon_frame_ptr->default_data( &(thla_manager.objects[4]),
                                    "moon_centered_inertial",
                                    "frame_packing",
                                    "EarthMoonBarycentricInertial",
                                    "MoonCentricInertial",
                                    false );

      // Setup the Mars inertial reference frame.
      mars_frame_ptr->default_data( &(thla_manager.objects[5]),
                                    "mars_centered_inertial",
                                    "frame_packing",
                                    "SolarSystemBarycentricInertial",
                                    "MarsCentricInertial",
                                    false );

      // Setup the Earth fixed reference frame.
      earth_pfix_frame_ptr->default_data( &(thla_manager.objects[6]),
                                          "earth_centered_fixed",
                                          "frame_packing",
                                          "EarthMJ2000Eq",
                                          "EarthCentricFixed",
                                          false );

      // Setup the Moon fixed reference frame.
      moon_pfix_frame_ptr->default_data( &(thla_manager.objects[7]),
                                         "moon_centered_fixed",
                                         "frame_packing",
                                         "MoonCentricInertial",
                                         "MoonCentricFixed",
                                         false );

      // Setup the Mars fixed reference frame.
      mars_pfix_frame_ptr->default_data( &(thla_manager.objects[8]),
                                         "mars_centered_fixed",
                                         "frame_packing",
                                         "MarsCentricInertial",
                                         "MarsCentricFixed",
                                         false );
   }

    // Need for scheduled job persitence.
   TrickHLA::Manager & thla_manager;
   SpaceFOM::ExecutionControl & exec_cntrl;
   jeod::TimeTT & time_tt;
   jeod::DynManager & dyn_manager;
   jeod::Planet & sun;
   jeod::Planet & earth;
   jeod::Planet & moon;
   jeod::Planet & mars;

   // Need additional reference frames not directly associated with a
   // planet.  These are for the two principal barycentric frames for
   // the solar system (SSBary) and the Earth-Moon (EMBary)
   jeod::RefFrame * ssbary_ptr; ///< @trick_units{--} Solar system barycenter.
   jeod::RefFrame * embary_ptr; ///< @trick_units{--} Earth-Moon system barycenter.

   // This object is not copyable
   JEODRefFrameTreeSimObject( const JEODRefFrameTreeSimObject & );
   JEODRefFrameTreeSimObject & operator=( const JEODRefFrameTreeSimObject & );

};


#include "JEODRefFrame.sm"

//==========================================================================
// SimObject instantiations.
//==========================================================================
// Main TrickHLA SimObject.
SpaceFOMSimObject THLA( THLA_DATA_CYCLE_TIME, THLA_INTERACTION_CYCLE_TIME,
                        P_HLA_EARLY, P_HLA_INIT, P_HLA_LATE );

// SimObject used capture simulation specific initialization.
JEODHLAInitSimObject THLA_INIT( jeod_time.time_manager,
                                jeod_time.time_manager_init,
                                jeod_time.time_tai,
                                jeod_time.time_tt,
                                THLA.manager,
                                THLA.federate,
                                THLA.execution_control,
                                P_HLA_INIT );

// Build the SpaceFOM Reference Frame Tree using JEOD reference frames.
JEODRefFrameTreeSimObject ref_frame_tree( THLA.manager,
                                          THLA.execution_control,
                                          jeod_time.time_tt,
                                          dynamics.dyn_manager,
                                          sun.planet,
                                          earth.planet,
                                          moon.planet,
                                          mars.planet );

// Instantiate the standard JEOD/SpaceFOM reference frames for the tree.
JEODRefFrameSimObject solar_system_barycenter( jeod_time.time_tt, (P_HLA_INIT-1), 40 );
JEODRefFrameSimObject sun_inertial( jeod_time.time_tt, (P_HLA_INIT-1), 40 );
JEODRefFrameSimObject earth_moon_barycenter( jeod_time.time_tt, (P_HLA_INIT-1), 40 );
JEODRefFrameSimObject earth_centered_inertial( jeod_time.time_tt, (P_HLA_INIT-1), 40 );
JEODRefFrameSimObject moon_centered_inertial( jeod_time.time_tt, (P_HLA_INIT-1), 40 );
JEODRefFrameSimObject mars_centered_inertial( jeod_time.time_tt, (P_HLA_INIT-1), 40 );
JEODRefFrameSimObject earth_centered_fixed( jeod_time.time_tt, (P_HLA_INIT-1), 40 );
JEODRefFrameSimObject moon_centered_fixed( jeod_time.time_tt, (P_HLA_INIT-1), 40 );
JEODRefFrameSimObject mars_centered_fixed( jeod_time.time_tt, (P_HLA_INIT-1), 40 );


//==========================================================================
// Create the THLA connections for the SpaceFOM Reference Frame Tree.
//==========================================================================
void create_connections() {

   // Make the connections for the Sun, Earth, Moon, Mars reference frame tree.
   ref_frame_tree.ssbary_frame_ptr = &solar_system_barycenter.frame_packing;
   ref_frame_tree.sun_frame_ptr = &sun_inertial.frame_packing;
   ref_frame_tree.embary_frame_ptr = &earth_moon_barycenter.frame_packing;
   ref_frame_tree.earth_frame_ptr = &earth_centered_inertial.frame_packing;
   ref_frame_tree.moon_frame_ptr = &moon_centered_inertial.frame_packing;
   ref_frame_tree.mars_frame_ptr = &mars_centered_inertial.frame_packing;
   ref_frame_tree.earth_pfix_frame_ptr = &earth_centered_fixed.frame_packing;
   ref_frame_tree.moon_pfix_frame_ptr = &moon_centered_fixed.frame_packing;
   ref_frame_tree.mars_pfix_frame_ptr = &mars_centered_fixed.frame_packing;

}

