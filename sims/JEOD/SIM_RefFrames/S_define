//==========================================================================
// Space Reference FOM: Simulation to test the SpaceFOM roles implementation.
//==========================================================================
// Description:
// This is a simulation definition file (S_define) that provides an example
// of an SpaceFOM compliant federate that services all SpaceFOM roles.
//==========================================================================

//==========================================================================
// Define the Trick executive and services simulation object instances:
// Use the "standard" Trick executive simulation object. This simulation
// object provides the traditional Trick executive capabilities but can be
// tailored to provide facility or project unique executive behavior. See
// the Trick documentation for more on usage and available options.
//==========================================================================
// Define the JEOD compatible phase initialization priorities.
#include "default_priority_settings.sm"

// Define the Trick default system infrastructure.
#include "sim_objects/default_trick_sys.sm"

//==========================================================================
// Define the JEOD job cycle times.
//==========================================================================
#define LOW_RATE_ENV  60.00    // Low-rate environment update interval
#define HIGH_RATE_ENV  0.250   // High-rate environment update interval
#define DYNAMICS       0.03125 // Vehicle and planetary dynamics interval (32Hz)

//==========================================================================
// Define the Trick HLA job cycle times.
//==========================================================================
#define THLA_DATA_CYCLE_TIME        HIGH_RATE_ENV // HLA data communication cycle time.
#define THLA_INTERACTION_CYCLE_TIME DYNAMICS      // HLA Interaction cycle time.

//==========================================================================
// Define the HLA phase initialization priorities.
//==========================================================================
#define P_HLA_EARLY  1     // HLA early job phase.
#define P_HLA_INIT   60    // HLA initialization phase.
#define P_HLA_LATE   65534 // HLA late job phase.


//==========================================================================
// JEOD include files used in SimObject definitions or for input file 
// instantiations.
//==========================================================================
#include "jeod_sys.sm"

// Set up desired time types and include the JEOD time S_module
#define TIME_MODEL_UT1
#define TIME_MODEL_UTC
#define TIME_MODEL_TT
#define TIME_MODEL_GMST
#define TIME_CALENDAR_UPDATE_INTERVAL  DYNAMICS
#include "jeod_time.sm"

#include "dynamics.sm"

#ifndef EPHEM_DE440
 #define EPHEM_DE440
#endif
#include "environment.sm"
#include "sun_basic.sm"
#include "earth_basic.sm"
#include "moon_basic.sm"
#include "mars_basic.sm"

//==========================================================================
// Trick HLA and SpaceFOM include files used in SimObject definitions or
// for input file instantiations.
//==========================================================================
// Define the number of JEOD Reference Frames in the SpaceFOM Reference
// Frame Tree.
#define NUM_SPACEFOM_REFERENCE_FRAMES 9

// This is needed for CTE timeline instantiation in the input file.
##include "TrickHLA/CTETimelineBase.hh"


//==========================================================================
// SIM_OBJECT: THLA - Generalized TrickHLA interface routines.
//==========================================================================
#include "SpaceFOM.sm"

%header{
 using namespace TrickHLA;
 using namespace SpaceFOM;
%}

//==========================================================================
// SIM_OBJECT: THLA_INIT - An example of a TrickHLA multi-phase
// initialization SimObject.
//==========================================================================
class JEODHLAInitSimObject : public Trick::SimObject {

 public:

   JEODHLAInitSimObject( jeod::TimeManager          & time_manager_in,
                         jeod::TimeManagerInit      & time_manager_init_in,
                         jeod::TimeTT               & time_in,
                         TrickHLA::Manager          & thla_mngr,
                         TrickHLA::Federate         & thla_fed,
                         SpaceFOM::ExecutionControl & exec_ctrl )
      : time_manager(time_manager_in),
        time_manager_init(time_manager_init_in),
        time_tt(time_in),
        thla_manager( thla_mngr ),
        thla_federate( thla_fed ),
        execution_control( exec_ctrl )
   {

      // Initialize the epoch based on the starting JEOD time.
      P60 ("initialization") set_scenario_timeline_epoch(time_tt);

      //--------------------------------------------------------------------
      // NOTE: Initialization phase numbers must be greater than P60 
      // (i.e. P_HLA_INIT) so that the initialization jobs run after the
      // P60 THLA.manager->initialize() job.
      //--------------------------------------------------------------------

      // Alternative method: Send and receive all the initialization data.

      // Send all the initialization data.
      P100 ("initialization") thla_manager.send_init_data();
      
      // Wait to receive all the initialization data.
      P100 ("initialization") thla_manager.receive_init_data();
      
      // Do some processing here if needed...
      
      // Clear remaining initialization sync-points.
      P100 ("initialization") thla_manager.clear_init_sync_points();
   }

 protected:
   void set_scenario_timeline_epoch(jeod::TimeTT & tt_time){
      // Set the epoch if this is the Master federate.
      if( execution_control.is_master() ){
         execution_control.scenario_timeline->set_epoch((tt_time.trunc_julian_time * 86400.0));
      }
      // Otherwise, it will be set through the ExCO.
      else {
         ;
      }
   }

 private:
   jeod::TimeManager          & time_manager;
   jeod::TimeManagerInit      & time_manager_init;
   jeod::TimeTT               & time_tt;
   TrickHLA::Manager          & thla_manager;
   TrickHLA::Federate         & thla_federate;
   SpaceFOM::ExecutionControl & execution_control;
	
   // Do not allow the implicit copy constructor or assignment operator.
   JEODHLAInitSimObject(const JEODHLAInitSimObject & rhs);
   JEODHLAInitSimObject & operator=(const JEODHLAInitSimObject & rhs);
	
   // Do not allow the default constructor.
   JEODHLAInitSimObject();

};


//==========================================================================
// SIM_OBJECT: JEODRefFrameTreeSimObject - An JEOD reference frame tree
// simulation object definition.
//==========================================================================
##include <iostream>
##include "utils/ref_frames/include/ref_frame_state.hh"
class JEODRefFrameTreeSimObject : public Trick::SimObject {

  public:
   // Need additional reference frames not directly associated with a
   // planet.  These are for the two principal barycentric frames for
   // the solar system (SSBary) and the Earth-Moon (EMBary)
   jeod::RefFrame * ssbary_ptr; ///< @trick_units{--} Solar system barycenter.
   jeod::RefFrame * embary_ptr; ///< @trick_units{--} Earth-Moon system barycenter.

   // SpaceFOM Reference Frame Tree constructor.
   JEODRefFrameTreeSimObject( TrickHLA::Manager & thla_manager_in,
                              jeod::DynManager  & dyn_manager_in,
                              jeod::Planet      & sun_in,
                              jeod::Planet      & earth_in,
                              jeod::Planet      & moon_in,
                              jeod::Planet      & mars_in )
   : thla_manager(thla_manager_in),
     dyn_manager(dyn_manager_in),
     sun(sun_in),
     earth(earth_in),
     moon(moon_in),
     mars(mars_in)
   {
      //
      // Default data jobs
      //
      //("default_data") allocate_tree(thla_manager);

      // We need to subscribe to the desired reference frames to insure that
      // JEOD updates them.
      P_EPH ("initialization") subscribe_to_frames();
   }

   // Allocate the reference frame objects needed for this tree.
   void allocate_tree( TrickHLA::Manager & thla_manager ){
      thla_manager.obj_count = NUM_SPACEFOM_REFERENCE_FRAMES;
      thla_manager.objects = (TrickHLA::Object*)trick_MM->declare_var( "TrickHLA::Object",
                                                                       thla_manager.obj_count );
      return;
   }

   // Subscribe to the needed JEOD reference frames.
   void subscribe_to_frames(){

      // We can start with the planetary frames.
      sun.inertial.subscribe();
      earth.inertial.subscribe();
      earth.pfix.subscribe();
      moon.inertial.subscribe();
      moon.pfix.subscribe();
      mars.inertial.subscribe();
      mars.pfix.subscribe();

      // We need to lookup the barycentric frames.
      ssbary_ptr = dyn_manager.find_ref_frame ("SSBary.inertial");
      // Must have a reference to the Solar System Barycenter frame.
      if ( ssbary_ptr == NULL ) {
         std::ostringstream errmsg;
         errmsg << "S_deJEODRefFrameTreeSimObject::subscribe_to_frames():" << __LINE__
                << " ERROR: Unexpected NULL reference frame: SSBary.inertial" << THLA_ENDL;
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }
      embary_ptr = dyn_manager.find_ref_frame ("EMBary.inertial");
      if ( embary_ptr == NULL ) {
         std::ostringstream errmsg;
         errmsg << "S_deJEODRefFrameTreeSimObject::subscribe_to_frames():" << __LINE__
                << " ERROR: Unexpected NULL reference frame: EMBary.inertial" << THLA_ENDL;
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }

      // Subscribe to the barycenter frames.
      ssbary_ptr->subscribe();
      embary_ptr->subscribe();

      return;
   }

  private:
    // Need for scheduled job persitence.
   TrickHLA::Manager & thla_manager;
    const jeod::DynManager & dyn_manager;
    jeod::Planet & sun;
    jeod::Planet & earth;
    jeod::Planet & moon;
    jeod::Planet & mars;

   // This object is not copyable
   JEODRefFrameTreeSimObject( const JEODRefFrameTreeSimObject & );
   JEODRefFrameTreeSimObject & operator=( const JEODRefFrameTreeSimObject & );

};


//==========================================================================
// SIM_OBJECT: JEODRefFrameSimObject - An example reference frame
// simulation object definition. This can be used for SpaceFOM ReferenceFrame
// object discovery and data exchange.
//==========================================================================
##include "environment/time/include/time_tt.hh"
##include "utils/ref_frames/include/ref_frame.hh"
##include "JEOD/JEODRefFrameState.hh"
class JEODRefFrameSimObject : public Trick::SimObject {

  public:

   /* HLA associated reference frames packing object. */
   JEODRefFrameState frame_packing;

   /* JEOD Reference Frame state in SpaceFOM parent frame. */
   jeod::RefFrameState ref_frame_state;

   /* SimObjct constructor. */
   JEODRefFrameSimObject( jeod::TimeTT   & time_in,
                          jeod::RefFrame * parent_frame_in,
                          jeod::RefFrame * target_frame_in,
                          unsigned short   _INIT = 59  )
   : time_tt(time_in),
     parent_frame_ptr(parent_frame_in),
     target_frame_ptr(target_frame_in)
   {
      //
      // Initialization jobs
      //
      // Initialize the reference frame packing object.
      P_INIT ("initialization") frame_packing.initialize( &ref_frame_state );

      // Update the reference frame state at the environment high rate.
      (HIGH_RATE_ENV, "environment") update();

   }

  private:
   jeod::TimeTT   & time_tt;
   jeod::RefFrame * parent_frame_ptr;
   jeod::RefFrame * target_frame_ptr;

   /* Update the SpaceFOM reference frame wrt. the specified parent frame. */
   void update () {

      // Compute the target reference frame wrt. the specified parent frame.
      target_frame_ptr->compute_relative_state( *parent_frame_ptr, ref_frame_state );

      // Set the time tag for this reference frame state.
      frame_packing.set_time((time_tt.trunc_julian_time * 86400.0));

      return;
   }

   // This object is not copyable
   JEODRefFrameSimObject( const JEODRefFrameSimObject & );
   JEODRefFrameSimObject & operator=( const JEODRefFrameSimObject & );

};


//==========================================================================
// SimObject instantiations.
//==========================================================================
// Main TrickHLA SimObject.
SpaceFOMSimObject THLA( THLA_DATA_CYCLE_TIME, THLA_INTERACTION_CYCLE_TIME,
                        P_HLA_EARLY, P_HLA_INIT, P_HLA_LATE );

// SimObject used capture simulation specific initialization.
JEODHLAInitSimObject THLA_INIT( jeod_time.time_manager,
                                jeod_time.time_manager_init,
                                jeod_time.time_tt,
                                THLA.manager,
                                THLA.federate,
                                THLA.execution_control );

// Build the SpaceFOM Reference Frame Tree using JEOD reference frames.
JEODRefFrameTreeSimObject ref_frame_tree( THLA.manager,
                                          dynamics.dyn_manager,
                                          sun.planet,
                                          earth.planet,
                                          moon.planet,
                                          mars.planet  );

JEODRefFrameSimObject solar_system_barycenter( jeod_time.time_tt, ref_frame_tree.ssbary_ptr, ref_frame_tree.ssbary_ptr );
JEODRefFrameSimObject sun_inertial( jeod_time.time_tt, ref_frame_tree.ssbary_ptr, &sun.planet.inertial );
JEODRefFrameSimObject earth_moon_barycenter( jeod_time.time_tt, ref_frame_tree.ssbary_ptr, ref_frame_tree.embary_ptr );
JEODRefFrameSimObject earth_centered_inertial( jeod_time.time_tt, ref_frame_tree.embary_ptr, &earth.planet.inertial );
JEODRefFrameSimObject moon_centered_inertial( jeod_time.time_tt, ref_frame_tree.embary_ptr, &moon.planet.inertial );
JEODRefFrameSimObject mars_centered_inertial( jeod_time.time_tt, ref_frame_tree.ssbary_ptr, &mars.planet.inertial );
JEODRefFrameSimObject earth_centered_fixed( jeod_time.time_tt, &earth.planet.inertial, &earth.planet.pfix );
JEODRefFrameSimObject moon_centered_fixed( jeod_time.time_tt, &moon.planet.inertial, &moon.planet.pfix );
JEODRefFrameSimObject mars_centered_fixed( jeod_time.time_tt, &mars.planet.inertial, &mars.planet.pfix );


//==========================================================================
// Create the THLA connections for the SpaceFOM Reference Frame Tree.
//==========================================================================
void create_connections() {

   // Allocate the Reference Frame tree.
   ref_frame_tree.allocate_tree( THLA.manager );

   // Setup the Solar System barycenter frame as the root reference frame.
   solar_system_barycenter.frame_packing.default_data( &(THLA.manager.objects[0]),
                                                       "solar_system_barycenter",
                                                       "frame_packing",
                                                       NULL,
                                                       "SolarSystemBarycentricInertial",
                                                       false );

   // Set the Solar System barycenter frame as the root reference frame.
   THLA.execution_control.root_ref_frame = &(solar_system_barycenter.frame_packing);

   // Setup the Sun inertial reference frame.
   sun_inertial.frame_packing.default_data( &(THLA.manager.objects[1]),
                                            "sun_inertial",
                                            "frame_packing",
                                            "SolarSystemBarycentricInertial",
                                            "SunCentricInertial",
                                            false );

   // Setup the Earth-Moon barycentric inertial reference frame.
   earth_moon_barycenter.frame_packing.default_data( &(THLA.manager.objects[2]),
                                                     "earth_moon_barycenter",
                                                     "frame_packing",
                                                     "SolarSystemBarycentricInertial",
                                                     "EarthMoonBarycentricInertial",
                                                     false );

   // Setup the Earth inertial reference frame.
   earth_centered_inertial.frame_packing.default_data( &(THLA.manager.objects[3]),
                                                       "earth_centered_inertial",
                                                       "frame_packing",
                                                       "EarthMoonBarycentricInertial",
                                                       "EarthMJ2000Eq",
                                                       false );

   // Setup the Moon inertial reference frame.
   moon_centered_inertial.frame_packing.default_data( &(THLA.manager.objects[4]),
                                                      "moon_centered_inertial",
                                                      "frame_packing",
                                                      "EarthMoonBarycentricInertial",
                                                      "MoonCentricInertial",
                                                      false );

   // Setup the Mars inertial reference frame.
   mars_centered_inertial.frame_packing.default_data( &(THLA.manager.objects[5]),
                                                      "mars_centered_inertial",
                                                      "frame_packing",
                                                      "SolarSystemBarycentricInertial",
                                                      "MarsCentricInertial",
                                                      false );

   // Setup the Earth fixed reference frame.
   earth_centered_fixed.frame_packing.default_data( &(THLA.manager.objects[6]),
                                                    "earth_centered_fixed",
                                                    "frame_packing",
                                                    "EarthMJ2000Eq",
                                                    "EarthCentricFixed",
                                                    false );

   // Setup the Moon fixed reference frame.
   moon_centered_fixed.frame_packing.default_data( &(THLA.manager.objects[7]),
                                                   "moon_centered_fixed",
                                                   "frame_packing",
                                                   "MoonCentricInertial",
                                                   "MoonCentricFixed",
                                                   false );

   // Setup the Mars fixed reference frame.
   mars_centered_fixed.frame_packing.default_data( &(THLA.manager.objects[8]),
                                                   "mars_centered_fixed",
                                                   "frame_packing",
                                                   "MarsCentricFixed",
                                                   "MarsCentricInertial",
                                                   false );

}

